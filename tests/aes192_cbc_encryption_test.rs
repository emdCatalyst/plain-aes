use plain_aes::{encrypt, CipherVersion, ModeOfOperation};

#[test]
fn encrypt_aes192_cbc_u8_block_1() {
    let key: &[u8] = &[
        0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79,
        0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b,
    ];
    let iv: &[u8] = &[
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
        0x0f,
    ];
    let plain: &[u8] = &[
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17,
        0x2a,
    ];
    let cipher: &[u8] = &[
        0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71,
        0xe8,
    ];
    let result = encrypt(plain, CipherVersion::Aes192(key, ModeOfOperation::CBC(iv)));
    assert!(cipher.iter().eq(result.unwrap().iter()))
}
#[test]
fn encrypt_aes192_cbc_u8_block_2() {
    let key: &[u8] = &[
        0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79,
        0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b,
    ];
    let iv: &[u8] = &[
        0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71,
        0xe8,
    ];
    let plain: &[u8] = &[
        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e,
        0x51,
    ];
    let cipher: &[u8] = &[
        0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14,
        0x5a,
    ];
    let result = encrypt(plain, CipherVersion::Aes192(key, ModeOfOperation::CBC(iv)));
    assert!(cipher.iter().eq(result.unwrap().iter()))
}
#[test]
fn encrypt_aes192_cbc_u8_block_3() {
    let key: &[u8] = &[
        0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79,
        0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b,
    ];
    let iv: &[u8] = &[
        0xB4, 0xD9, 0xAD, 0xA9, 0xAD, 0x7D, 0xED, 0xF4, 0xE5, 0xE7, 0x38, 0x76, 0x3F, 0x69, 0x14,
        0x5A,
    ];
    let plain: &[u8] = &[
        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52,
        0xef,
    ];
    let cipher: &[u8] = &[
        0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02,
        0xe0,
    ];
    let result = encrypt(plain, CipherVersion::Aes192(key, ModeOfOperation::CBC(iv)));
    assert!(cipher.iter().eq(result.unwrap().iter()))
}
#[test]
fn encrypt_aes192_cbc_u8_block_4() {
    let key: &[u8] = &[
        0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79,
        0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b,
    ];
    let iv: &[u8] = &[
        0x57, 0x1B, 0x24, 0x20, 0x12, 0xFB, 0x7A, 0xE0, 0x7F, 0xA9, 0xBA, 0xAC, 0x3D, 0xF1, 0x02,
        0xE0,
    ];
    let plain: &[u8] = &[
        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37,
        0x10,
    ];
    let cipher: &[u8] = &[
        0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15,
        0xcd,
    ];
    let result = encrypt(plain, CipherVersion::Aes192(key, ModeOfOperation::CBC(iv)));
    assert!(cipher.iter().eq(result.unwrap().iter()))
}
#[test]
fn encrypt_aes192_cbc_str() {
    let iv = "This lib is cool".as_bytes();
    let plain = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse ullamcorper quis enim non molestie. Pellentesque suscipit quam sit amet libero consequat fringilla. Duis vulputate arcu malesuada lectus consequat pharetra. Sed euismod tempus tempus. Etiam molestie iaculis arcu vulputate ornare. In interdum congue sapien, a congue nunc venenatis et. Mauris imperdiet, elit vitae efficitur porttitor, augue metus suscipit sapien, ac maximus magna magna et elit. Nam auctor ante quis nisl imperdiet, et ornare arcu sollicitudin. Duis dapibus ultricies tellus, et viverra justo bibendum ac. Curabitur nec ultrices augue. Suspendisse faucibus posuere imperdiet. Quisque euismod consequat sapien nec vehicula. Mauris ipsum arcu, elementum sit amet odio vitae, porttitor fringilla mauris. Ut tincidunt purus ut lorem tempus, eget elementum dui finibus. Nulla molestie nec nisl non dapibus. Aenean urna risus, posuere eu euismod ut, semper ac elit.";
    let key = "This is a secret key....".as_bytes();
    let result = encrypt(plain, CipherVersion::Aes192(key, ModeOfOperation::CBC(iv)));
    let cipher = [
        0x39, 0xEE, 0x05, 0x68, 0x03, 0x76, 0x42, 0xF5, 0x51, 0x68, 0x03, 0xDD, 0x12, 0x46, 0x59,
        0xA8, 0x49, 0xD5, 0x19, 0x36, 0xDE, 0x68, 0xD4, 0x05, 0xB4, 0xA4, 0x8B, 0xA7, 0x57, 0x7D,
        0xF1, 0x39, 0x47, 0x48, 0xB5, 0x33, 0xFA, 0x04, 0xA5, 0x58, 0x64, 0x73, 0xCC, 0x93, 0xC4,
        0x7D, 0x07, 0xEF, 0x13, 0x41, 0x16, 0x3F, 0xB1, 0xD2, 0x67, 0xEB, 0xE5, 0xFB, 0xDB, 0x0B,
        0x47, 0x7B, 0xA3, 0xAB, 0x6B, 0xAA, 0x77, 0xD2, 0x89, 0x7F, 0x80, 0x17, 0x56, 0xB5, 0x25,
        0x81, 0xC9, 0xAB, 0x20, 0x56, 0x71, 0xB3, 0x7A, 0xE9, 0x5C, 0xE1, 0x83, 0x96, 0x1C, 0x74,
        0x05, 0x2C, 0xEC, 0x8E, 0xBD, 0x85, 0x44, 0xF4, 0xB5, 0xF5, 0xC0, 0x58, 0xD1, 0x61, 0x75,
        0x3A, 0xBE, 0x9B, 0x92, 0xD7, 0x18, 0x77, 0x90, 0x6F, 0x84, 0xBF, 0x2F, 0xEE, 0x3C, 0x60,
        0x3B, 0xF9, 0x56, 0x97, 0xFE, 0xF3, 0x4E, 0x80, 0x9F, 0xAC, 0x83, 0xC7, 0x52, 0xB2, 0xBE,
        0x7D, 0xBD, 0x3F, 0xE4, 0xAC, 0x68, 0xAB, 0xC1, 0x5C, 0x95, 0x36, 0xB9, 0xCE, 0x88, 0x81,
        0xE0, 0xE6, 0xFB, 0x4E, 0x1F, 0x63, 0x31, 0xDF, 0x56, 0xE0, 0xF8, 0x5E, 0x3C, 0x1D, 0xA7,
        0x04, 0x86, 0x7C, 0xF3, 0x13, 0x5F, 0x79, 0x94, 0x4C, 0xC7, 0xAD, 0xE3, 0x00, 0x97, 0x84,
        0x8A, 0xFA, 0x13, 0xA7, 0x4C, 0xB7, 0xAB, 0x5D, 0x7B, 0x8D, 0x0E, 0x40, 0x51, 0xB7, 0x39,
        0x30, 0x34, 0x1D, 0xF4, 0x37, 0xEA, 0x55, 0x92, 0x86, 0x1E, 0x1C, 0xB2, 0xF2, 0xE3, 0x09,
        0x43, 0xB9, 0x1E, 0x5B, 0x76, 0xC7, 0x14, 0x45, 0x48, 0x1F, 0xA7, 0xE8, 0x0B, 0xB0, 0x1D,
        0xDE, 0xAA, 0x4E, 0x07, 0xDC, 0x48, 0xFF, 0xFD, 0xB7, 0x3F, 0x40, 0x2A, 0xF3, 0xED, 0xAF,
        0x9F, 0x90, 0x39, 0x8D, 0xF7, 0x16, 0xBE, 0x7B, 0x84, 0x17, 0x99, 0xCA, 0xCC, 0x60, 0x34,
        0x4B, 0x59, 0x8B, 0xD6, 0x04, 0x03, 0x9D, 0x42, 0xB6, 0x81, 0x26, 0xEA, 0x7F, 0xAB, 0x87,
        0x0D, 0xE5, 0xF9, 0xDB, 0xA2, 0xB6, 0x6B, 0x74, 0x90, 0xA3, 0x2C, 0x64, 0xEF, 0xD6, 0xE3,
        0x11, 0xAE, 0x56, 0x33, 0x32, 0xC1, 0xFC, 0x7F, 0x85, 0x90, 0x39, 0x06, 0x59, 0x0B, 0x51,
        0x9B, 0x33, 0xDC, 0xEF, 0x7E, 0x6E, 0xE0, 0x60, 0x33, 0x02, 0x34, 0x24, 0x07, 0xF9, 0x81,
        0xB8, 0x7A, 0xB0, 0xF6, 0x5C, 0x60, 0x23, 0xFC, 0x75, 0x92, 0x67, 0xFE, 0x12, 0xC2, 0x47,
        0xA4, 0x14, 0xAF, 0x02, 0xE7, 0xAA, 0x7A, 0xB0, 0xB4, 0x16, 0xDA, 0xEB, 0xFB, 0x8E, 0xB6,
        0xC2, 0xB9, 0xA8, 0xCB, 0x40, 0xBF, 0x1D, 0x1A, 0x35, 0xF8, 0xA0, 0x79, 0xAD, 0xFC, 0x35,
        0x86, 0xA4, 0x8B, 0xE1, 0xB4, 0xCD, 0x65, 0x55, 0x3C, 0x64, 0xEA, 0x97, 0xD5, 0xFC, 0xCD,
        0x90, 0x77, 0xE6, 0xE6, 0x36, 0xA9, 0x5C, 0x4A, 0x02, 0x48, 0x45, 0x43, 0xCD, 0xF1, 0x1B,
        0xC8, 0xBE, 0x2F, 0xC9, 0x19, 0x2D, 0xF3, 0x28, 0xF5, 0x39, 0x67, 0x72, 0xFF, 0x2C, 0xA1,
        0x8E, 0x36, 0xCB, 0x72, 0x8A, 0xB1, 0x1D, 0x7C, 0x51, 0x87, 0xDB, 0x1E, 0xB5, 0xD4, 0xF5,
        0x56, 0x79, 0x05, 0x20, 0xEB, 0xD5, 0x03, 0x36, 0x5D, 0x06, 0x32, 0x5A, 0x1B, 0x43, 0xCC,
        0x93, 0x52, 0xEB, 0x01, 0xDC, 0x21, 0xD0, 0x58, 0x8F, 0x0E, 0x9D, 0xC1, 0x44, 0x57, 0xFC,
        0xB9, 0xEB, 0x8D, 0xE8, 0x7F, 0xEE, 0x65, 0xA2, 0x65, 0xFD, 0x9B, 0x47, 0x5A, 0x72, 0x65,
        0xFF, 0xBA, 0x87, 0xAE, 0x4F, 0x2C, 0x87, 0x0F, 0xF5, 0x50, 0x3D, 0x56, 0x70, 0x31, 0xBA,
        0xA0, 0x7B, 0x46, 0x3B, 0x84, 0x25, 0xA7, 0x07, 0xD7, 0x24, 0x90, 0x60, 0x4C, 0xB5, 0x56,
        0x7C, 0x1B, 0xFC, 0x93, 0x0C, 0x6D, 0x27, 0x79, 0xF8, 0x68, 0xA5, 0x5D, 0xC0, 0xBB, 0xEE,
        0x59, 0x27, 0x00, 0xEA, 0xED, 0x14, 0xC0, 0x3F, 0x4A, 0x68, 0xE8, 0x40, 0x56, 0x3C, 0x13,
        0x82, 0xC1, 0x40, 0x59, 0x74, 0xB6, 0xCC, 0x17, 0x70, 0x6E, 0x4C, 0x25, 0x7D, 0x3D, 0xB4,
        0x22, 0xEB, 0xEC, 0xCD, 0x43, 0x4D, 0xB7, 0xD8, 0x6A, 0x6D, 0x68, 0xE1, 0x06, 0x10, 0x0B,
        0x3F, 0x95, 0x88, 0x88, 0xBA, 0x6C, 0x93, 0x7C, 0x50, 0x2D, 0x06, 0xB6, 0xB8, 0x60, 0x67,
        0xD8, 0x33, 0x09, 0xF1, 0x67, 0xE9, 0x4B, 0x3D, 0x37, 0xBD, 0xC7, 0xA0, 0x88, 0x35, 0x74,
        0x78, 0x8F, 0x8A, 0x0C, 0x82, 0xE3, 0x31, 0xF5, 0xC9, 0x96, 0xFE, 0xBD, 0xC5, 0x01, 0xF4,
        0xA9, 0x58, 0xD8, 0xE9, 0xF6, 0x2F, 0x3C, 0x10, 0x2D, 0x59, 0xD8, 0x76, 0x16, 0x15, 0x56,
        0xCD, 0xBF, 0x02, 0xD9, 0x22, 0x8B, 0x97, 0x4C, 0xFB, 0x03, 0x20, 0x45, 0x0B, 0x4C, 0x93,
        0xBE, 0xF9, 0x97, 0x78, 0x17, 0x91, 0x8F, 0x49, 0xD8, 0x59, 0x9F, 0x23, 0xBC, 0x31, 0xBE,
        0x88, 0xCD, 0x19, 0x6C, 0x87, 0xF5, 0xE1, 0xF1, 0xBF, 0x01, 0x4D, 0x48, 0x10, 0x7A, 0x70,
        0x65, 0x75, 0x36, 0xCB, 0xF1, 0x1B, 0xFA, 0xD8, 0x95, 0x26, 0xD2, 0x74, 0x28, 0x08, 0x73,
        0xFF, 0xD2, 0x7A, 0x00, 0xDA, 0x96, 0x0D, 0xFC, 0x39, 0x65, 0x17, 0x13, 0x3A, 0x1E, 0xA1,
        0x85, 0x62, 0x77, 0xA1, 0x38, 0xDB, 0x7F, 0x0A, 0x84, 0xC5, 0x2A, 0xEC, 0x7D, 0x45, 0x99,
        0xB5, 0xB8, 0xED, 0x64, 0x02, 0xDC, 0xA7, 0x10, 0x8F, 0x91, 0x3F, 0x85, 0xFD, 0x08, 0x52,
        0xF6, 0x81, 0x01, 0x55, 0x59, 0x70, 0x98, 0x10, 0x03, 0xF6, 0x58, 0x3F, 0xFF, 0xD0, 0x5D,
        0xBA, 0x21, 0x61, 0x4A, 0xC6, 0xA8, 0x67, 0x9C, 0x19, 0x16, 0xD6, 0xF7, 0xDD, 0xC1, 0xFA,
        0xE4, 0x2D, 0x62, 0xE1, 0x95, 0x0E, 0xB1, 0x1C, 0x81, 0x02, 0x63, 0x3F, 0x9B, 0x6D, 0x1F,
        0xED, 0xE5, 0x36, 0x5B, 0x93, 0xF3, 0xBC, 0x96, 0x24, 0xBE, 0xC9, 0x39, 0x64, 0xF9, 0xEC,
        0x9D, 0x4E, 0x96, 0x20, 0xA6, 0xB7, 0xFA, 0x57, 0x2A, 0x8B, 0x82, 0xE7, 0xDA, 0x4A, 0xB5,
        0x7E, 0xCB, 0x89, 0x4E, 0x17, 0x4A, 0x97, 0x3D, 0xCD, 0x77, 0x58, 0x8C, 0x6E, 0xFA, 0x74,
        0x7F, 0x51, 0x41, 0x55, 0xCE, 0xA2, 0xE1, 0xC3, 0xD6, 0xD9, 0xA7, 0xEA, 0xCC, 0xEE, 0x78,
        0x7A, 0x31, 0x55, 0x6D, 0xA2, 0xF2, 0xAB, 0xC5, 0x17, 0xF4, 0x49, 0x30, 0xA5, 0xAB, 0xF1,
        0x55, 0xA3, 0x80, 0x2D, 0x8D, 0x04, 0x2E, 0x94, 0xBF, 0x95, 0x11, 0xE0, 0xFF, 0xDF, 0x6D,
        0xC7, 0xF0, 0xFE, 0xEE, 0x50, 0x04, 0x1B, 0x52, 0x60, 0x5D, 0x81, 0x22, 0xE2, 0x24, 0xCA,
        0x30, 0xAD, 0xE7, 0x02, 0x68, 0xBF, 0x2F, 0x1E, 0x68, 0x73, 0x59, 0x14, 0xB3, 0x69, 0x63,
        0x3D, 0xFC, 0xEB, 0x27, 0x07, 0xE1, 0x76, 0xD9, 0x32, 0xA8, 0xC6, 0x2D, 0xD0, 0x66, 0xCB,
        0xE9, 0x07, 0x6F, 0x82, 0x97, 0x36, 0xD2, 0xF8, 0x37, 0x14, 0x84, 0xE4, 0xF0, 0x6F, 0x06,
        0x73, 0x36, 0xCC, 0x93, 0x20, 0x67, 0x1E, 0xCA, 0x73, 0x15, 0x8F, 0x3D, 0xEF, 0x83, 0x83,
        0xAC, 0xBE, 0x5D, 0x0F, 0xCA, 0x89, 0xD6, 0xB3, 0x9B, 0x70, 0x75, 0xE3, 0x83, 0xAB, 0xA1,
        0xD1, 0x1D, 0x46, 0x1E, 0xC7, 0x18, 0x35, 0x55, 0x9C, 0x88, 0x05, 0xF4, 0xAE, 0x06, 0x20,
    ];
    assert!(cipher.iter().eq(result.unwrap().iter()))
}
